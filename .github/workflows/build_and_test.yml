name: Build the API and run Lint/Tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: 'Create an env file'
      run: |
        touch .env
        echo SECRET_KEY=LONG_SECRET_KEY >> .env
        echo ALLOWED_HOSTS=HOSTNAME1,HOSTNAME2 >> .env
        echo IS_DEBUG=0 >> .env
        echo POSTGRES_USER=mydatabaseuser >> .env
        echo POSTGRES_PASSWORD=mypassword >> .env
        echo POSTGRES_DB=mydatabase >> .env
        echo POSTGRES_HOST=myproject_db >> .env
        echo PGDATA=/var/lib/postgresql/data/pgdata >> .env
        echo OPENSKY_NETWORK_USERNAME=__OPENSKY__ID__ >> .env
        echo OPENSKY_NETWORK_PASSWORD=__OPENSKY__PASSWORD__ >> .env
        echo REDIS_HOST=redis >> .env
        echo REDIS_PORT=6379 >> .env
        echo REDI_PASSWORD=___LONG_PASSWORD__ >> .env
        echo REDIS_BROKER_URL=redis://localhost:6379 >> .env
        echo HEARTBEAT_RATE_SECS=2 >> .env
        echo AMQP_URL=amqp://guest:guest@rabbitmq:5672/ >> .env
        echo DSS_SELF_AUDIENCE=uspace-dev.flightblender.com >> .env
        echo AUTH_DSS_CLIENT_ID=fjvDNmfeDF03myU3xH9pD3mM9 >> .env
        echo AUTH_DSS_CLIENT_SECRET=eB3cF8eF4aP5vL1j__SOME_LONG_KEY__ >> .env
        echo DSS_BASE_URL=https://dss.com >> .env
        echo DSS_AUTH_URL=https://auth.caa.com >> .env
        echo DSS_AUTH_TOKEN_ENDPOINT=/oauth/token >> .env
        echo DSS_AUTH_JWKS_ENDPOINT=https://auth.caa.com/.well-known/jwks.json >> .env
        echo BLENDER_FQDN=https://alpha.flightblender.com/ >> .env
        cat .env
    - name: Build the docker container
      run: |
        docker-compose build
    - name: Up the docker container
      run: |
        docker-compose up -d
    - name: Run unit tests
      run: |
        docker-compose exec -T celery pytest
